library(KernSmooth)
install.packages("swirl")
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
library()
library("swirl")
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
getwd()
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1", "folder2")
dir.create(recursive = TRUE)
dir.create("folder1", recursive = TRUE)
?dir.create
dir.create("testdir2", "testdir3", recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("testdir", recursive = TRUE)
library("swirl")
ls()
rm(list=ls())
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matric <- my_vector
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbin(pateints, my_matrix)
cbind(pateints, my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patients", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 = 7)
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x <- })
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Grandma", "passed!")
submit()
submit()
mad_libs(place = "Erode", adjective = "big", noun = "Chocka")
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flags, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
getwd()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags_landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
objects.size(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,100,0.7)
flips2 <- rbinom(1,100,0.7)
flips2 <- rbinom(100,1,0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5)
rpois(5,10)
my_pois <- replicate(100,rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- striptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
play()
head(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
?ggplot
getwd()
library
install.packages("ggplot2")
a <- c(1,2,4,7,9)
mean(a)
x <- list(a = 1:5, b = rnorm(10))
mean(x)
lapply(x,mean)
a <- list(1,2,4,7,9)
mean(a)
class(a)
a <- c(1,2,4,7,9)
class(a)
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
clear
swirl()
find.packages("swirl")
install.packages("swirl")
library(swirl)
library("swirl")
install.packages("evaluate")
library(swirl)
library("swirl")
install.packages("swirl", dependencies=TRUE)
library(swirl)
install.packages("R6")
install.packages("R6")
swirl()
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 +100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 +1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10,by=0.5)
my_seq = seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq.along(my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Chocka")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
bye()
exit
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5); y <- c(3, 2, 10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x
x[[2]]
class(x[[2]])
typeof(x[[2]])
y <- x[[2]]
x <- 1:4; y <- 2
x + y
x <- c(3, 5, 1, 10, 12, 6)
x[x<6] == 0
x[x<=5] <- 0
x
getwd
getwd()
setwd("F:/mooc/R_Programming_Coursera/Week1")
ls()
list.files()
my_data <- read.csv("hw1_data.csv")
my_data
head(my_data)
nrow(my_data)
tail(my_data, 2)
my_data(Ozone, 47)
my_data[Ozone,47]
my_data[2,47]
my_data[1,47]
my_data[47,1]
my_data
is.na(my_data)
is.na(my_data)$Ozone
is.na(my_data$Ozone)
size(is.na(my_data$Ozone))
length(is.na(my_data$Ozone))
length(is.na(my_data$Ozone) == TRUE)
sum(is.na(my_data[,1]))
sum(is.na(my_data$Ozone))
mean(my_data$Ozone, na.rm = TRUE)
my_data
my_data[my_data$Ozone > 31 & my_data$Temp > 90]
my_data(my_data$Ozone > 31 & my_data$Temp > 90)
mini <- subset(my_data, Ozone > 31 & Temp > 90)
apply(mini, 2, mean, na.rm = TRUE)
apply(mini$Solar.R, 2, mean, na.rm = TRUE)
apply(mini$Solar.R, mean, na.rm = TRUE)
mini
mean(mini$Solar.R)
mean(mini$Solar.R, na.rm = TRUE)
mean(subset(my_data, Month == 6), na.rm = TRUE)
mini2 <- subset(my_data, Month == 6)
mean(mini2$Temp, na.rm = TRUE)
mini2 <- subset(my_data, Month == 5)
max(mini2, na)
max(mini2, na.rm = TRUE)
max(mini2$Ozone, na.rm = TRUE)
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files
)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.remove("mytest.R", "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2/testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2),each=10)
swirl()
